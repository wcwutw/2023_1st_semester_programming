// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	And16(a=x, b[0..15]=false, out=zerox);
	And16(a=y, b[0..15]=false, out=zeroy);
	Mux16(a=x, b=zerox, sel=zx, out=afterzx);
	Mux16(a=y, b=zeroy, sel=zy, out=afterzy);
	Not16(in=afterzx, out=notx);
	Not16(in=afterzy, out=noty);
	Mux16(a=afterzx, b=notx, sel=nx, out=afterzxnx);
	Mux16(a=afterzy, b=noty, sel=ny, out=afterzyny);
	Add16(a=afterzxnx, b=afterzyny, out=resadd);
	And16(a=afterzxnx, b=afterzyny, out=resand);
	Mux16(a=resand, b=resadd, sel=f, out=lstres);
	Not16(in=lstres, out=notlstres);
	Mux16(a=lstres, b=notlstres, sel=no, out=res);

	Or16(a=res, b[0..15]=false, out[0]=orr1, out[1]=orr2, out[2]=orr3, out[3]=orr4, out[4]=orr5, out[5]=orr6, out[6]=orr7, out[7]=orr8, out[8]=orr9, out[9]=orr10, out[10]=orr11, out[11]=orr12, out[12]=orr13, out[13]=orr14, out[14]=orr15, out[15]=orr16);
	
	Or(a=orr1, b=orr2, out=orr17);
	Or(a=orr3, b=orr4, out=orr18);
	Or(a=orr5, b=orr6, out=orr19);
	Or(a=orr7, b=orr8, out=orr20);
	Or(a=orr9, b=orr10, out=orr21);
	Or(a=orr11, b=orr12, out=orr22);
	Or(a=orr13, b=orr14, out=orr23);
	Or(a=orr15, b=orr16, out=orr24);
	Or(a=orr17, b=orr18, out=orr25);
	Or(a=orr19, b=orr20, out=orr26);
	Or(a=orr21, b=orr22, out=orr27);
	Or(a=orr23, b=orr24, out=orr28);
	Or(a=orr25, b=orr26, out=orr29);
	Or(a=orr27, b=orr28, out=orr30);
	Or(a=orr29, b=orr30, out=nzr);
	
	Not(in=nzr, out=zr);

	Or16(a=res, b[0..15]=false, out[15]=ng, out[0..14]=useless);
	Or16(a=res, b[0..15]=false, out=out);
}
